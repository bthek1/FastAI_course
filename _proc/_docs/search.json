[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "fastAIcourse",
    "section": "",
    "text": "nbdev_prepare\n\nnbdev_prepare\n\nGit stuff\n\ngit add .\ngit commit -m \"update\"\ngit push"
  },
  {
    "objectID": "index.html#step-for-git-push",
    "href": "index.html#step-for-git-push",
    "title": "fastAIcourse",
    "section": "",
    "text": "nbdev_prepare\n\nnbdev_prepare\n\nGit stuff\n\ngit add .\ngit commit -m \"update\"\ngit push"
  },
  {
    "objectID": "index.html#after-changing-dependencies",
    "href": "index.html#after-changing-dependencies",
    "title": "fastAIcourse",
    "section": "After changing dependencies",
    "text": "After changing dependencies\npip install fastAIcourse\npip install -e '.[dev]'"
  },
  {
    "objectID": "lession1.html",
    "href": "lession1.html",
    "title": "Lession 1:",
    "section": "",
    "text": "!conda list | findstr \"pytorch\"\n\npytorch                   2.0.1           py3.11_cuda11.8_cudnn8_0    pytorch\npytorch-cuda              11.8                 h24eeafa_5    pytorch\npytorch-ignite            0.4.12                   pypi_0    pypi\npytorch-lightning         2.0.5                    pypi_0    pypi\npytorch-mutex             1.0                        cuda    pytorch\n\n\n\n!nvcc --version\n\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2022 NVIDIA Corporation\nBuilt on Wed_Sep_21_10:41:10_Pacific_Daylight_Time_2022\nCuda compilation tools, release 11.8, V11.8.89\nBuild cuda_11.8.r11.8/compiler.31833905_0\n\n\n\n!pip list | findstr \"fastai\"\n\nfastai                   2.7.12\n\n\n\n!pip list | findstr \"duckduckgo\"\n\nduckduckgo-search        3.8.3\n\n\n\n!pip list | findstr \"fastbook\"\n\nfastbook                 0.0.29\n\n\n\nimport torch\n\n\ntorch.cuda.is_available()\n\nTrue"
  },
  {
    "objectID": "lession1.html#check-for-all-installs-and-versions",
    "href": "lession1.html#check-for-all-installs-and-versions",
    "title": "Lession 1:",
    "section": "",
    "text": "!conda list | findstr \"pytorch\"\n\npytorch                   2.0.1           py3.11_cuda11.8_cudnn8_0    pytorch\npytorch-cuda              11.8                 h24eeafa_5    pytorch\npytorch-ignite            0.4.12                   pypi_0    pypi\npytorch-lightning         2.0.5                    pypi_0    pypi\npytorch-mutex             1.0                        cuda    pytorch\n\n\n\n!nvcc --version\n\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2022 NVIDIA Corporation\nBuilt on Wed_Sep_21_10:41:10_Pacific_Daylight_Time_2022\nCuda compilation tools, release 11.8, V11.8.89\nBuild cuda_11.8.r11.8/compiler.31833905_0\n\n\n\n!pip list | findstr \"fastai\"\n\nfastai                   2.7.12\n\n\n\n!pip list | findstr \"duckduckgo\"\n\nduckduckgo-search        3.8.3\n\n\n\n!pip list | findstr \"fastbook\"\n\nfastbook                 0.0.29\n\n\n\nimport torch\n\n\ntorch.cuda.is_available()\n\nTrue"
  },
  {
    "objectID": "lession1.html#generate-data-images",
    "href": "lession1.html#generate-data-images",
    "title": "Lession 1:",
    "section": "Generate Data Images",
    "text": "Generate Data Images\n\nfrom fastbook import search_images_ddg\nfrom fastdownload import download_url\nfrom fastai.vision.all import *\nimport os\n\n\n\nCode\ndef download_pic(name):   \n    # File path of the image\n    image_path = f'{name}.jpg'\n\n    # Check if the image file exists\n    if os.path.exists(image_path):\n        print(\"Image file exists.\")\n    else:\n        print(\"Image file does not exist.\")\n        download_url(\n            search_images_ddg(f'{name}',\n            max_images=1)[0], f'{name}.jpg',\n            show_progress=False\n        )\n\n    return Image.open(f'{name}.jpg').to_thumb(256,256)\n\n\n\nsource\n\ndownload_pic\n\n download_pic (name)\n\nLet’s start by searching for a bird photo and seeing what kind of result we get. We’ll start by getting URLs from a search:\n\ndownload_pic('bird')\n\nImage file exists.\n\n\n\n\n\n…and then download a URL and take a look at it:\nNow let’s do the same with “forest photos”:\n\ndownload_pic('forest')\n\nImage file exists.\n\n\n\n\n\n\n\nCode\ndef create_searches_folder(folder_path, searches):\n    for i in searches:\n        dest = (folder_path/i)\n        dest.mkdir(exist_ok=True, parents=True)\n        print(f'created {i} folder')\n\n\n\nsource\n\n\ncreate_searches_folder\n\n create_searches_folder (folder_path, searches)\n\n\n\nCode\ndef download_search_images(folder_path, searches, amount):\n    for j in searches:\n        print(f\"downloading images for: {j}\")\n        download_images(\n            folder_path/j,\n            urls=search_images_ddg(f'{j} photo', amount),\n            n_workers=16\n        )\n\n\n\nsource\n\n\ndownload_search_images\n\n download_search_images (folder_path, searches, amount)\n\n\n\nCode\ndef verify_pics(folder_path):\n    failed = verify_images(get_image_files(folder_path))\n    failed.map(Path.unlink)\n    print(f\"Number of images failed: {len(failed)}\")\n\n\n\nsource\n\n\nverify_pics\n\n verify_pics (folder_path)\n\n\n\nCode\ndef resize_pics(folder_path, searches):\n    for k in searches:\n        resize_images(\n            folder_path/k,\n            max_size=400,\n            dest=folder_path/k,\n            max_workers=8\n        )\n        print(f\"resizing images for: {k}\")\n\n\n\nsource\n\n\nresize_pics\n\n resize_pics (folder_path, searches)\n\n\n\nCode\ndef create_data_folder(folder_path, searches, amount):\n    if os.path.exists(folder_path):\n        print(f\"Folder already exists: {folder_path}\")\n    else:   \n        create_searches_folder(folder_path, searches)\n        download_search_images(folder_path, searches, amount)\n        verify_pics(folder_path)\n        resize_pics(folder_path, searches)\n\n\n\nsource\n\n\ncreate_data_folder\n\n create_data_folder (folder_path, searches, amount)\n\n\n\nCode\nsearches = 'forest','bird'\npath = Path('bird_or_not')\n\ncreate_data_folder(path, searches, 200)\n\n\nFolder already exists: bird_or_not"
  },
  {
    "objectID": "lession1.html#creating-the-model",
    "href": "lession1.html#creating-the-model",
    "title": "Lession 1:",
    "section": "Creating the model",
    "text": "Creating the model\n\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), \n    get_items=get_image_files, \n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path)\n\ndls.show_batch(max_n=6)\n\n\n\n\nHere what each of the DataBlock parameters means:\nblocks=(ImageBlock, CategoryBlock),\nThe inputs to our model are images, and the outputs are categories (in this case, “bird” or “forest”).\nget_items=get_image_files, \nTo find all the inputs to our model, run the get_image_files function (which returns a list of all image files in a path).\nsplitter=RandomSplitter(valid_pct=0.2, seed=42),\nSplit the data into training and validation sets randomly, using 20% of the data for the validation set.\nget_y=parent_label,\nThe labels (y values) is the name of the parent of each file (i.e. the name of the folder they’re in, which will be bird or forest).\nitem_tfms=[Resize(192, method='squish')]\nBefore training, resize each image to 192x192 pixels by “squishing” it (as opposed to cropping it)."
  },
  {
    "objectID": "lession1.html#traning-the-model",
    "href": "lession1.html#traning-the-model",
    "title": "Lession 1:",
    "section": "Traning the model",
    "text": "Traning the model\nNow we’re ready to train our model. The fastest widely used computer vision model is resnet18. You can train this in a few minutes, even on a CPU! (On a GPU, it generally takes under 10 seconds…)\nfastai comes with a helpful fine_tune() method which automatically uses best practices for fine tuning a pre-trained model, so we’ll use that.1\n\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(3)\n\nC:\\Users\\bthek\\anaconda3\\envs\\newAI\\Lib\\site-packages\\torchvision\\models\\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\nC:\\Users\\bthek\\anaconda3\\envs\\newAI\\Lib\\site-packages\\torchvision\\models\\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.720669\n0.809375\n0.218750\n00:03\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.034033\n0.110016\n0.031250\n00:01\n\n\n1\n0.018758\n0.014891\n0.015625\n00:01\n\n\n2\n0.012558\n0.004601\n0.000000\n00:01"
  },
  {
    "objectID": "lession1.html#step-3-use-our-model-and-build-your-own",
    "href": "lession1.html#step-3-use-our-model-and-build-your-own",
    "title": "Lession 1:",
    "section": "Step 3: Use our model (and build your own!)",
    "text": "Step 3: Use our model (and build your own!)\nLet’s see what our model thinks about that bird we downloaded at the start:\n\nis_bird,_,probs = learn.predict(PILImage.create('bird.jpg'))\nprint(f\"This is a: {is_bird}.\")\nprint(f\"Probability it's a bird: {probs[0]:.4f}\")\n\n\n\n\n\n\n\n\nThis is a: bird.\nProbability it's a bird: 0.9999"
  },
  {
    "objectID": "lession1.html#deep-learning-is-not-just-for-image-classification",
    "href": "lession1.html#deep-learning-is-not-just-for-image-classification",
    "title": "Lession 1:",
    "section": "Deep Learning Is Not Just for Image Classification",
    "text": "Deep Learning Is Not Just for Image Classification\n\nSegmentationDataLoaders - Easier than datablocks\n\npath = untar_data(URLs.CAMVID_TINY)\ndls = SegmentationDataLoaders.from_label_func(\n    path, bs=8, fnames = get_image_files(path/\"images\"),\n    label_func = lambda o: path/'labels'/f'{o.stem}_P{o.suffix}',\n    codes = np.loadtxt(path/'codes.txt', dtype=str)\n)\n\nlearn = unet_learner(dls, resnet34)\nlearn.fine_tune(8)\n\nTabular analysis - income prediction\n\nfrom fastai.tabular.all import *\npath = untar_data(URLs.ADULT_SAMPLE)\n\ndls = TabularDataLoaders.from_csv(path/'adult.csv', path=path, y_names=\"salary\",\n    cat_names = ['workclass', 'education', 'marital-status', 'occupation',\n                 'relationship', 'race'],\n    cont_names = ['age', 'fnlwgt', 'education-num'],\n    procs = [Categorify, FillMissing, Normalize])\n\nlearn = tabular_learner(dls, metrics=accuracy)\nlearn.fit_one_cycle(3)\n\ndls.show_batch()\n\nCollaboration filtering - ratings/ recommendations\n\nfrom fastai.collab import *\npath = untar_data(URLs.ML_SAMPLE)\ndls = CollabDataLoaders.from_csv(path/'ratings.csv')\nlearn = collab_learner(dls, y_range=(0.5,5.5))\nlearn.fine_tune(10)\nlearn.show_results()\n\nExample\n\nfrom fastai.text.all import *\n\ndls = TextDataLoaders.from_folder(untar_data(URLs.IMDB), valid='test', bs=32)\nlearn = text_classifier_learner(dls, AWD_LSTM, drop_mult=0.5, metrics=accuracy)\nlearn.fine_tune(4, 1e-2)\nThis reduces the batch size to 32 (we will explain this later). If you keep hitting the same error, change 32 to 16\n\nExample\n\nfrom fastai.text.all import *\n\ndls = TextDataLoaders.from_folder(untar_data(URLs.IMDB), valid='test')\nlearn = text_classifier_learner(dls, AWD_LSTM, drop_mult=0.5, \n                                metrics=accuracy)\nlearn.fine_tune(4, 1e-2)"
  }
]